# - *- coding: utf- 8 - *-
import asyncio
import configparser
import secrets
from datetime import datetime, date
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from filters import IsAdmin
from keyboards.default import check_user_out_func, get_functions_func
from keyboards.inline import *
from keyboards.inline import cicada
from loader import bot, dp
from data.config import BOT_TOKEN
from data.config import adm
import requests
from states import StorageFunctions
from utils.db_api.sqlite import (get_all_usersx, get_purchasex, get_refillx,
                                 last_purchasesx, update_userx)
import configparser

config = configparser.ConfigParser()
config.read("Settings")
# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì
def split_messages(get_list, count):
    return [get_list[i:i + count] for i in range(0, len(get_list), count)]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.message_handler(IsAdmin(), text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", state="*")
async def send_ad_all_users(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üì¢ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>")
    await StorageFunctions.here_ad_text.set()


@dp.message_handler(IsAdmin(), text="‚öôÔ∏è –î–æ–ø. –ü—Ä–æ–≥—Ä–∞–º–º—ã", state="*")
async def send_programs(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–ü—Ä–æ–≥—Ä–∞–º–º—ã –ª–∏—á–Ω–æ –æ—Ç –º–µ–Ω—è', reply_markup=cicada.cicada3301)


@dp.message_handler(IsAdmin(), text="üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ‚öúÔ∏è", state= "*")
async def send_add_admins(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üë§ <b>–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>")
    await StorageFunctions.here_ad2_text.set()
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è"
@dp.message_handler(IsAdmin(), text="üì± –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è üîç", state="*")
async def search_profile(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üì± –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä:</b>\n"
                         "‚ñ∂ 123456789\n"
                         "‚ñ∂ @example")
    await StorageFunctions.here_search_profile.set()

cur_time = date.today()


#üîó –û–¥–Ω. —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞
MethodGetMe = (f'''https://api.telegram.org/bot{BOT_TOKEN}/GetMe''')
response = requests.post(MethodGetMe)
tttm = response.json()


id_us = (tttm['result']['id'])
first_name = (tttm['result']['first_name'])
username = (tttm['result']['username'])



@dp.message_handler(IsAdmin(), text="üîó –û–¥–Ω. —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞")
async def saver_handler(message: types.Message):
    await message.delete()
    dostyp = secrets.token_urlsafe(15)
    rr = open("dostyp.ff", 'w')
    rr.write(dostyp)
    rr.close()
    await message.answer(f"http://t.me/{username}?start={dostyp}") 


@dp.message_handler(IsAdmin(), text="—Å–∫–∞—á–∞—Ç—å")
async def saver_handler(message: types.Message):
    with open("data/botBD.sqlite", "rb") as doc:
        await bot.send_document(message.chat.id,
                                doc,
                                caption=f"üì¶ BACKUP\n"
                                        f"üïú {cur_time}")

@dp.message_handler(IsAdmin(), text="–∞–¥–º–∏–Ω—ã")
async def search_receipt(message: types.Message):
    await message.answer(adm)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ —á–µ–∫–æ–≤"
@dp.message_handler(IsAdmin(), text="üìÉ –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤ üîç", state="*")
async def search_receipt(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üìÉ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞. –ü—Ä–∏–º–µ—Ä:</b>\n"
                         "‚ñ∂ +123456789\n"
                         "‚ñ∂ #F123456789")
    await StorageFunctions.here_search_receipt.set()

# –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_ad2_text)
async def input_text_for_ad2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_send_ad2"] = str(message.text)
    await StorageFunctions.here_ad2_text.set()
    await bot.send_message(message.from_user.id, 
                           f"üë§ –î–æ–±–∞–≤–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                           f"üë§ ‚û°Ô∏è‚û°Ô∏è <code>{message.text}</code>\n"
                           f"–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º ? \n",
                           reply_markup=sure_admin_ad_inl)


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_ad_text)
async def input_text_for_ad(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_send_ad"] = "üì¢ –†–∞—Å—Å—ã–ª–∫–∞.\n" + str(message.text)
    users = get_all_usersx()

    await StorageFunctions.here_ad_text.set()
    await bot.send_message(message.from_user.id,
                           f"üì¢ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                           f"‚ñ∂ <code>{message.text}</code>\n"
                           f"üë§ <code>{len(users)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
                           reply_markup=sure_send_ad_inl)





@dp.callback_query_handler(IsAdmin(), text=["yes_admin_ad", "no_admin_kb"], state=StorageFunctions.here_ad2_text)
async def send_ad2(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    if call.data == "no_admin_kb":
        await state.finish()
        await call.message.answer("<b>üë§ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –î–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –ê–¥–º–∏–Ω–∞–º ‚ùå</b>")
        await state.finish()
        
    else:
        await call.message.answer(f"<b>üë§ –î–æ–±–∞–≤–ª–µ–Ω .... </b>")
        async with state.proxy() as data:
            send_ad2 = data["here_send_ad2"]
        await state.finish()
        adm.append(send_ad2)

        await call.message.answer(
            f"<b>üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**  {send_ad2}</b>\n"
            f"<b>üë§ –°—Ç–∞–ª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚úÖ</b>")
        
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text=["not_send_kb", "yes_send_ad"], state=StorageFunctions.here_ad_text)
async def sends_ad(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    if call.data == "not_send_kb":
        await state.finish()
        await call.message.answer("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚òë</b>")
    else:
        await call.message.answer(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...</b>")
        async with state.proxy() as data:
            send_ad_message = data["here_send_ad"]
        await state.finish()
        asyncio.create_task(send_message_to_user(send_ad_message, call.from_user.id))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message_to_user(message, user_id):
    receive_users, block_users = 0, 0
    users = get_all_usersx()
    for user in users:
        try:
            await bot.send_message(user[1], message)
            receive_users += 1
        except:
            block_users += 1
        await asyncio.sleep(0.05)
    await bot.send_message(user_id,
                           f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚òë</b>\n"
                           f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
                           f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ –∏–ª–∏ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_search_profile)
async def input_data_for_search_profile(message: types.Message, state: FSMContext):
    get_user_data = message.text
    if get_user_data.isdigit():
        get_user_id = get_userx(user_id=get_user_data)
    else:
        get_user_data = get_user_data[1:]
        get_user_id = get_userx(user_login=get_user_data.lower())
    if get_user_id is not None:
        await message.answer(search_user_profile(get_user_id[1]), reply_markup=search_profile_func(get_user_id[1]))
        await state.finish()
    else:
        if message.text == '–≤—Å–µ':
            users = get_all_usersx()
            for user in users:
            
                ms = (
                    F"Username: {user[2]}  ID: {user[1]}"
                )

                #ms += int(1)
                await bot.send_message(message.chat.id, ms)
                    

                await asyncio.sleep(0.05)
                await StorageFunctions.here_search_profile.set()
        else:
            await bot.send_message(message.chat.id, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ã–π –≤–≤–æ–¥')

# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="show_purchases", state="*")
async def change_user_sale(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    last_purchases = last_purchasesx(user_id)
    if len(last_purchases) >= 1:
        await call.message.delete()
        count_split = 0
        save_purchases = []
        for purchases in last_purchases:
            save_purchases.append(f"<b>üìÉ –ß–µ–∫:</b> <code>#{purchases[4]}</code>\n"
                                  f"‚ñ∂ {purchases[9]} | {purchases[5]}—à—Ç | {purchases[6]}üí¥\n"
                                  f"üïú {purchases[13]}\n"
                                  f"<code>{purchases[10]}</code>")
        await call.message.answer("<b>üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫</b>\n"
                                  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
        save_purchases.reverse()
        len_purchases = len(save_purchases)
        if len_purchases > 4:
            count_split = round(len_purchases / 4)
            count_split = len_purchases // count_split
        if count_split > 1:
            get_message = split_messages(save_purchases, count_split)
            for msg in get_message:
                send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(msg)
                await call.message.answer(send_message)
        else:
            send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(save_purchases)
            await call.message.answer(send_message)
        await call.message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
    else:
        await bot.answer_callback_query(call.id, "‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø—Ä–æ—Å—ã")


# –í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="add_balance", state="*")
async def add_balance_user(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["here_cache_user_id"] = call.data.split(":")[1]
    await call.message.delete()
    await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞</b>")
    await StorageFunctions.here_add_balance.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_add_balance)
async def input_add_balance(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        get_amount = int(message.text)
        if get_amount >= 1:
            async with state.proxy() as data:
                user_id = data["here_cache_user_id"]
            get_user = get_userx(user_id=user_id)
            update_userx(user_id, balance=int(get_user[4]) + get_amount)
            await message.answer("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> "
                                 f"<a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> "
                                 f"<b>–±—ã–ª–æ –≤—ã–¥–∞–Ω–æ</b> <code>{get_amount} —à—Ç</code>",
                                 reply_markup=check_user_out_func(message.from_user.id))
            await bot.send_message(user_id, f"<b>–¢–µ–±–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ</b> <code>{get_amount} —à—Ç</code>")
            await message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
            await state.finish()
        else:
            await message.answer("<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–¥–∞—á–∏ 1</b>\n"
                                 "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —à—Ç –¥–ª—è –≤—ã–¥–∞—á–∏")
            await StorageFunctions.here_add_balance.set()
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏")
        await StorageFunctions.here_add_balance.set()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="set_balance", state="*")
async def set_balance_user(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["here_cache_user_id"] = call.data.split(":")[1]
    await call.message.delete()
    await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</b>")
    await StorageFunctions.here_set_balance.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_set_balance)
async def input_set_balance(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        get_amount = int(message.text)
        if get_amount >= 0:
            async with state.proxy() as data:
                user_id = data["here_cache_user_id"]
            get_user = get_userx(user_id=user_id)
            update_userx(user_id, balance=get_amount)
            await message.answer("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> "
                                 f"<a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> "
                                 f"<b>–±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –¥–æ—Å—Ç—É–ø –Ω–∞</b> <code>{get_amount} —à—Ç</code>",
                                 reply_markup=check_user_out_func(message.from_user.id))
            await message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
            await state.finish()
        else:
            await message.answer("<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–¥–∞—á–∏ 1</b>\n"
                                 "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —à—Ç –¥–ª—è –≤—ã–¥–∞—á–∏")
            await StorageFunctions.here_set_balance.set()
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —à—Ç –¥–ª—è –≤—ã–¥–∞—á–∏")
        await StorageFunctions.here_set_balance.set()


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="send_message", state="*")
async def send_user_message(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["here_cache_user_id"] = call.data.split(":")[1]
    await call.message.delete()
    await call.message.answer("<b>üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n"
                              "‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await StorageFunctions.here_send_message.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_send_message)
async def input_send_user_message(message: types.Message, state: FSMContext):
    get_message = "<b>‚ùï –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n" + message.text
    async with state.proxy() as data:
        user_id = data["here_cache_user_id"]
    get_user = get_userx(user_id=user_id)
    await bot.send_message(user_id, get_message)
    await message.answer("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> "
                         f"<a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> "
                         f"<b>–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                         f"{get_message}",
                         reply_markup=check_user_out_func(message.from_user.id))
    await message.answer(search_user_profile(user_id), reply_markup=search_profile_func(user_id))
    await state.finish()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(IsAdmin(), state=StorageFunctions.here_search_receipt)
async def input_search_receipt(message: types.Message, state: FSMContext):
    receipt = message.text[1:]
    if message.text.startswith("+"):
        get_input = get_refillx("*", receipt=receipt)
        if get_input is not None:
            await state.finish()
            if get_input[7] == "Form":
                way_input = "ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ —Ñ–æ—Ä–º–µ</code>"
            elif get_input[7] == "Nickname":
                way_input = "ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ –Ω–∏–∫–Ω–µ–π–º—É</code>"
            elif get_input[7] == "Number":
                way_input = "ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ –Ω–æ–º–µ—Ä—É</code>"
            await message.answer(f"<b>üìÉ –ß–µ–∫:</b> <code>+{get_input[6]}</code>\n"
                                 "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_input[1]}'>{get_input[3]}</a> <code>({get_input[1]})</code>\n"
                                 f"üíµ –°—É–º–º–∞: <code>{get_input[5]}üí¥</code>\n"
                                 f"{way_input}\n"
                                 f"üè∑ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{get_input[4]}</code>\n"
                                 f"üïú –î–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_input[8]}</code>",
                                 reply_markup=get_functions_func(message.from_user.id))
        else:
            await message.answer("<b>‚ùå –ß–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.</b>\n"
                                 "üìÉ –í–≤–µ–¥–∏—Ç–µ —á–µ–∫ / –Ω–æ–º–µ—Ä –ø–æ–∫—É–ø–∫–∏. –ü—Ä–∏–º–µ—Ä:\n"
                                 "‚ñ∂ +123456789123\n"
                                 "‚ñ∂ #123456789123")
            await StorageFunctions.here_search_receipt.set()
    elif message.text.startswith("#"):
        get_purchase = get_purchasex("*", receipt=receipt)
        if get_purchase is not None:
            await state.finish()
            buy_items = "<b>üìç –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n" + get_purchase[10]
            await message.answer(f"<b>üìÉ –ß–µ–∫:</b> <code>#{get_purchase[4]}</code>\n"
                                 f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase[9]}</code>\n"
                                 f"üì¶ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_purchase[5]}—à—Ç</code>\n"
                                 f"üí∏ –¶–µ–Ω–∞ 1-–≥–æ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase[7]}üí¥</code>\n"
                                 f"üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase[6]}üí¥</code>\n"
                                 f"üë§ –ö—É–ø–∏–ª —Ç–æ–≤–∞—Ä: <a href='tg://user?id={get_purchase[1]}'>{get_purchase[3]}</a> <code>({get_purchase[1]})</code>\n"
                                 f"üîª –ë–∞–ª–∞–Ω—Å –¥–æ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase[11]}üí¥</code>\n"
                                 f"üî∫ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase[12]}üí¥</code>\n"
                                 f"üïú –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase[13]}</code>\n"
                                 f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 f"{buy_items}",
                                 reply_markup=get_functions_func(message.from_user.id))
        else:
            await message.answer("<b>‚ùå –ß–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.</b>\n"
                                 "üìÉ –í–≤–µ–¥–∏—Ç–µ —á–µ–∫ / –Ω–æ–º–µ—Ä –ø–æ–∫—É–ø–∫–∏. –ü—Ä–∏–º–µ—Ä:\n"
                                 "‚ñ∂ +123456789123\n"
                                 "‚ñ∂ #123456789123")
            await StorageFunctions.here_search_receipt.set()
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÉ –í–≤–µ–¥–∏—Ç–µ —á–µ–∫ / –Ω–æ–º–µ—Ä –ø–æ–∫—É–ø–∫–∏. –ü—Ä–∏–º–µ—Ä:\n"
                             "‚ñ∂ +123456789123\n"
                             "‚ñ∂ #123456789123")
        await StorageFunctions.here_search_receipt.set()
