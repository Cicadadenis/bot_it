# - *- coding: utf- 8 - *-
#
from aiogram.dispatcher.filters.state import State
from handlers.users.admin_functions import send_message_to_user
from aiogram import types
from aiogram.dispatcher import FSMContext

from filters import IsWork, IsUser
from filters.all_filters import IsBuy
from keyboards.default import check_user_out_func, lic
from keyboards.inline import cicada
from keyboards.default.menu import ssaa
from loader import dp, bot
from states import StorageUsers
from states.state_functions import StorageFunctions
from utils.db_api.sqlite import *
from utils.other_func import get_dates
import datetime
import random
import config2
import time
import json
from SystemInfo import SystemInfo
import requests
import sys
import re
import urllib.request
import secrets
import sqlite3
import os
from data.config import adm
import functions as func
from aiogram.dispatcher import FSMContext
from utils.user import *
import utils.mydb
import configparser
from aiogram.dispatcher.filters.state import State, StatesGroup
from typing import Text
from aiogram import types, Bot, Dispatcher
from aiogram import executor
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw 
import secrets
import os, sys
import config
import logging
import kb
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import io
import aiohttp
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import (ChatType, ContentTypes, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.markdown import hbold, hlink
from aiogram.utils.exceptions import BadRequest 
import asyncio
from contextlib import suppress
from foto import *
from aiogram import types
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound)
class cicada(StatesGroup):
    sms = State()
    size = State()
    up_y = State()
    up_x = State()
    red = State()
    green = State()
    blue = State()
    ban = State()

sozdatel = 1144785510

config = configparser.ConfigParser()
config.read("Settings")
url = ('http://telegra.ph//file/db14d05e947eb8784ec4d.jpg')
prohibit_buy = ["xbuy_item", "not_buy_items", "buy_this_item", "buy_open_position", "back_buy_item_position",
                "buy_position_prevp", "buy_position_nextp", "buy_category_prevp", "buy_category_nextp",
                "back_buy_item_to_category", "buy_open_category"]

from utils.number import Number
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
@dp.message_handler(IsWork(), state="*")
@dp.callback_query_handler(IsWork(), state="*")
async def send_work_message(message: types.Message, state: FSMContext):
    if "id" in message:
        await message.answer("üî¥ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.")
    else:
        await message.answer("<b>üî¥ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>")

lice = []
banned_users = set()


@dp.message_handler(user_id=banned_users)
async def handle_banned(message: types.Message):
    print(f"{message.from_user.full_name} –ø–∏—à–µ—Ç, –Ω–æ –º—ã –µ–º—É –Ω–µ –æ—Ç–≤–µ—Ç–∏–º!")
    return False



@dp.message_handler(commands=['ban'], user_id=1144785510) # –∑–¥–µ—Å—å —É–∫–∞–∂–∏ —Å–≤–æ–π ID
async def handle_ban_command(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    try:
        abuser_id = int(message.get_args())
    except (ValueError, TypeError):
        return await message.reply("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    banned_users.add(abuser_id)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {abuser_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
#


@dp.callback_query_handler(text='ban', state="*")
async def ban_add(call: types.CallbackQuery, state: FSMContext):
    try:
        abuser_id = int(call.message.get_args())
    except (ValueError, TypeError):
        return await call.message.reply("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    banned_users.add(abuser_id)
    await call.message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {abuser_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")



@dp.message_handler(commands=['start'], state="*",)
@dp.message_handler(text="‚¨Ö –ù–∞ –≥–ª–∞–≤–Ω—É—é", state="*")
async def bot_start(message: types.Message, state: FSMContext):
    pw = re.sub('\/\w+\s', "", message.text)
    await state.finish()
    yuy = int(message.chat.id)
    with open('id.txt', 'w') as f:
        print(yuy, file=f)
    
    first_name = (message.from_user.first_name)
    get_user_id = get_userx(user_id=message.from_user.id)
    rr = open('dostyp.ff', 'r')
    dostyp = rr.read()
    rr.close()
    if get_user_id is None:
        try:
            if pw == dostyp:
                    tt = open('dostyp.ff', 'w')
                    tt.write(secrets.token_urlsafe(15))
                    tt.close()
                    add_userx(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates())
                   
                    add_userx(message.from_user.id, message.from_user.username, first_name, 0, 0, get_dates())
                    predyp = (
                        f"ü•≥ü•≥ü•≥ –ù–æ–≤—ã–π —é–∑–µ—Ä\n"
                        f"      üë§: {message.from_user.first_name}\n"
                        f"      üÜî: {message.from_user.id}\n"
                        f"      üè∑: @{message.from_user.username}")
                    await bot.send_message(chat_id=sozdatel, text=predyp)
                    if first_name != get_user_id[3]:
                        update_userx(get_user_id[1], user_name=first_name)
                    if message.from_user.username is not None:
                        if message.from_user.username.lower() != get_user_id[2]:
                            update_userx(get_user_id[1], user_login=message.from_user.username.lower())
                   # with open('copyright.jpg', 'rb') as photo:
 #                       tesa = (f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
 #   f"<b>              –í—ã–¥–∞—á–∞ –ê–∫–∞—É–Ω—Ç–æ–≤</b> \n\n"
 #   f"<em>–ù–∞ —Å—É—Ç–∫–∏ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –≤–∑—è—Ç—å —É –±–æ—Ç–∞ 3 –∞–∫–∞—É–Ω—Ç–∞:</em>\n\n"
 #   f"Support: <a href='https://t.me/satanasat'>Cicada3301</a>\n"
 #   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
 #   f"–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ—Ç—É –∑–∞ –∞–∫–∞—É–Ω—Ç–∞–º–∏\n"
 #   f"–ü–∏—Å–≤—Ç—å –º–Ω–µ <a href='https://t.me/satanasat'>–°–Æ–î–ê</a>\n"
 #   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
 #                       await bot.send_photo(message.chat.id, photo, caption=tesa, reply_markup=lic)
#
                        predyp = (
                            f"      ‚úÖüîê –ù–æ–≤—ã–π —é–∑–µ—Ä\n\n"
                            f"      üë§: {message.from_user.first_name}\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"      üÜî: <code>{message.from_user.id}</code>\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"      üè∑: @{message.from_user.username}"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
                        await bot.send_message(chat_id=sozdatel, text=predyp)       
                            
            else:
                usernname = (message.from_user.username)
                usser_add = open('usser', 'w')
                usser_add.write(usernname)
                usser_add.close()
                namme_add = (message.from_user.first_name)
                nm = open('namme','w')
                nm.write(namme_add)
                nm.close()
                idd = (message.from_user.id)
                with open('bloc.jfif', 'rb') as photo:
                    blok = (
                        f"<b>      ‚ùå –£ –¢–ï–ë–Ø –ù–ï–¢ –î–û–°–¢–£–ü–ê ‚ùå</b>"
                    )
                    await bot.send_photo(message.from_user.id, photo, caption=blok)
                    
                    predyp = (
                            f"      ‚ùå –ü–æ–ø—ã—Ç–∫–∞ –í—Ö–æ–¥–∞ ‚ùå\n\n"
                            f"      üë§: {message.from_user.first_name}\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"      üÜî: <code>{message.from_user.id}</code>\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"      üè∑: @{message.from_user.username}\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
                            
                    with open('danger.jfif', 'rb') as photo:
                        await bot.send_photo(sozdatel, photo, caption=predyp, reply_markup=ssaa)
                    time.sleep(5)
                    await bot.send_message(message.from_user.id, text='‚ÄºÔ∏è <b>–ü—Ä–æ –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –±—É–¥—É—Ç —É–∑–≤–µ—â–µ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ë–æ—Ç–∞ </b>')
                    time.sleep(6)
                    await bot.send_message(message.from_user.id, text='‚ÄºÔ∏è <b>–ï—Å–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—Å —è —Å—Ä–∞–∑—É –≤–∞–º —Å–æ–æ–±—â—é </b>')
                    
        except:
            pass
    else:
        with open('copyright.jpg', 'rb') as photo:
                           
                            
                            llll = (
                                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                f"<b>–Ø —Å–æ–∑–¥–∞–ª –∫–æ–¥ –±–µ–∑–æ–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞</b>\n"
                                f"<b>–ö–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</b>\n"
                                f"<b>–î–ª—è –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>\n"
                                f"<b>–ò —Å—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ë–æ—Ç–∞</b>\n"
                                f"<b>–ú–æ–∂–Ω–æ –ª–∏—à—å –ø–æ –æ–¥–Ω–æ–º—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É</b>\n"
                                f"<b>–ü–æ–ª—É—á–∏–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞</b>\n"
                                f"<b>–û—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞</b>\n"
                                f"<b>–í —ç—Ç–æ–º –ë–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–æ–º–µ—Ä–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª</b>\n"
                                f"<b>–ò –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é –Ω–∞ Icloud</b>\n"
                                f"<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è</b>\n"
                                f"<b>–ê–∫–∞—É–Ω—Ç–æ–≤ –∏ —É—á–µ—Ç–Ω—ã—Ö –ó–∞–ø–∏—Å–µ–π,</b>\n"
                                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            )
                            chat_id = message.chat.id
                            try:
                                if chat_id in lice:
                                    await bot.send_message(chat_id, '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é',  reply_markup=check_user_out_func(message.from_user.id))
                                else:

                                    await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=llll, parse_mode='HTML', reply_markup=lic)
                                    lice.append(chat_id)

                            except:
                                pass



 
@dp.callback_query_handler(text='yes_add')
async def lica_message(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    fir = open('namme', 'r')
    first_add = fir.read()
    fir.close()
    tx = open('usser', 'r')
    us_name = tx.read()
    tx.close()
    iidz = open('id.txt', 'r')
    sete = iidz.read()
    iidz.close()
    print(
        f"{sete}\n"
        f"{us_name}\n"
        f"{first_add}\ns"
    )
    add_userx(sete, us_name, first_add, 0, 0, get_dates())
    predyp = (
        f"ü•≥ü•≥ü•≥ –ù–æ–≤—ã–π —é–∑–µ—Ä\n"
        f"      üë§: {first_add}\n"
        f"      üÜî: {sete}\n"
        f"      üè∑: @{us_name}")
    await bot.send_message(chat_id=sozdatel, text=predyp)
    await bot.send_message(chat_id=sete, text='‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –£—Ç–≤–µ—Ä–¥–∏–ª–∞ –≤–∞—Å, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å !!!</b>', reply_markup=check_user_out_func(call.message.from_user.id))
  



@dp.callback_query_handler(text='pr')
async def licenziya_message(message: types.Message):
    
    with open('copyright.jpg', 'rb') as photo:
        await bot.send_photo(message.from_user.id, photo, reply_markup=check_user_out_func(message.from_user.id))

@dp.message_handler(commands=['inf'])
async def send_er_message(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=SystemInfo.get_info_text(), parse_mode='html')
    
    
    
@dp.message_handler(IsUser(), state="*")
@dp.callback_query_handler(IsUser(), state="*")
async def send_user_message(message: types.Message, state: FSMContext):
    await state.finish()

    await bot.send_message(message.from_user.id,
                        "<b>‚ùó –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.</b>\n"
                        "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start")



       

